package com.sankuai.avatar.workflow.core.checker.global;

import com.sankuai.avatar.workflow.core.annotation.CheckerMeta;
import com.sankuai.avatar.workflow.core.checker.CheckerRequest;
import com.sankuai.avatar.workflow.core.checker.CheckerResponse;
import com.sankuai.avatar.workflow.core.checker.CheckerResult;
import com.sankuai.avatar.workflow.core.checker.response.AcceptResponse;
import com.sankuai.avatar.workflow.core.checker.response.RejectResponse;
import com.sankuai.avatar.workflow.core.client.mutex.MutexResourceClient;
import com.sankuai.avatar.workflow.core.client.mutex.request.MutexResourceRequest;
import com.sankuai.avatar.workflow.core.client.mutex.response.MutexResourceResponse;
import com.sankuai.avatar.workflow.core.context.FlowContext;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * 全局互斥资源锁检查
 *
 * @author zhaozhifan02
 */
@Slf4j
@CheckerMeta(name = "互斥资源锁校验", description = "流程发起互斥资源锁校验")
@Component
public class MutexResourceLockGlobalChecker extends AbstractGlobalChecker {

    private final MutexResourceClient mutexResourceClient;

    @Autowired
    public MutexResourceLockGlobalChecker(MutexResourceClient mutexResourceClient) {
        this.mutexResourceClient = mutexResourceClient;
    }

    @Override
    public CheckerResult doCheck(CheckerRequest checkerRequest) {
        CheckerResult checkerResult = CheckerResult.of();
        FlowContext flowContext = checkerRequest.getFlowContext();
        checkerResult.getCheckerResponseList().add(checkCommonMutexResource(flowContext));
        return checkerResult;
    }

    @Override
    public Boolean shouldSkip(CheckerRequest checkerRequest) {
        FlowContext flowContext = checkerRequest.getFlowContext();
        MutexResourceRequest request = MutexResourceRequest.builder()
                .flowContext(flowContext)
                .build();
        return mutexResourceClient.canSkip(request);
    }

    /**
     * 检查互斥资源锁
     *
     * @param flowContext 流程上下文
     * @return 检查结果
     */
    private CheckerResponse checkCommonMutexResource(FlowContext flowContext) {
        MutexResourceRequest request = MutexResourceRequest.builder()
                .flowContext(flowContext)
                .build();
        MutexResourceResponse response = mutexResourceClient.validate(request);
        // 有资源被锁定代表资源冲突，预检拦截
        if (response.isLocked()) {
            return RejectResponse.ofMsg(response.getMessage());
        }
        return AcceptResponse.of();
    }
}
