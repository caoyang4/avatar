package com.sankuai.avatar.workflow.core.checker.global;

import com.sankuai.avatar.workflow.core.annotation.CheckerMeta;
import com.sankuai.avatar.workflow.core.checker.CheckerRequest;
import com.sankuai.avatar.workflow.core.checker.CheckerResponse;
import com.sankuai.avatar.workflow.core.checker.CheckerResult;
import com.sankuai.avatar.workflow.core.checker.response.AcceptResponse;
import com.sankuai.avatar.workflow.core.checker.response.RejectResponse;
import com.sankuai.avatar.workflow.core.client.permission.FlowPermissionClient;
import com.sankuai.avatar.workflow.core.client.permission.request.FlowPermissionRequest;
import com.sankuai.avatar.workflow.core.client.permission.response.FlowPermissionResponse;
import com.sankuai.avatar.workflow.core.context.FlowContext;
import com.sankuai.avatar.workflow.core.context.FlowTemplateName;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * 全局权限校验
 *
 * @author zhaozhifan02
 */
@Slf4j
@CheckerMeta(name = "权限校验",
        description = "流程发起权限校验",
        checkAppkeyUser = false,
        blackFlowList = {FlowTemplateName.OCEANUS_PUBLISH_ROLLBACK,
                FlowTemplateName.DELIVER_ACTIVITY_RESOURCE,
                FlowTemplateName.APPLY_EMERGENCY_SRE})
@Component
public class PermissionGlobalChecker extends AbstractGlobalChecker {

    private final FlowPermissionClient flowPermissionClient;

    @Autowired
    public PermissionGlobalChecker(FlowPermissionClient flowPermissionClient) {
        this.flowPermissionClient = flowPermissionClient;
    }

    @Override
    public CheckerResult doCheck(CheckerRequest checkerRequest) {
        FlowContext flowContext = checkerRequest.getFlowContext();
        CheckerResult checkerResult = CheckerResult.of();
        checkerResult.getCheckerResponseList().add(checkUserPermission(flowContext));
        return checkerResult;
    }

    @Override
    public Boolean shouldSkip(CheckerRequest checkerRequest) {
        FlowContext flowContext = checkerRequest.getFlowContext();
        FlowPermissionRequest request = FlowPermissionRequest.builder()
                .flowContext(flowContext)
                .build();
        return flowPermissionClient.canSkip(request);
    }


    /**
     * 检查用户权限
     *
     * @param flowContext 流程上下文
     * @return 检查结果
     */
    private CheckerResponse checkUserPermission(FlowContext flowContext) {
        FlowPermissionRequest request = FlowPermissionRequest.builder()
                .flowContext(flowContext)
                .build();
        FlowPermissionResponse response = flowPermissionClient.validate(request);
        if (response.isHasPermission()) {
            return AcceptResponse.of();
        }
        // 无权限，预检拦截
        return RejectResponse.ofMsg(response.getMessage());
    }
}
